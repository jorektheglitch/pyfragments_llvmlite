from llvmlite import ir


int8 = ir.IntType(8)
int32 = ir.IntType(32)
int64 = ir.IntType(64)

char = ir.IntType(8)
char_p = char.as_pointer()

void = ir.VoidType()
void_p = int8.as_pointer()

size = ir.IntType(1)
size_t = size.as_pointer()
ssize_t = size.as_pointer()
ssize_t_p = ssize_t.as_pointer()


class TypeTable:

    def __init__(self, pyobject: ir.LiteralStructType, pytypeobject: ir.LiteralStructType, pybuffer: ir.LiteralStructType):
        pyobject_p = pyobject.as_pointer()
        pytypeobject_p = pytypeobject.as_pointer()
        pybuffer_p = pybuffer.as_pointer()
        self.pyobject = pyobject
        self.pyobject_p = pyobject_p
        self.pytypeobject = pytypeobject
        self.pytypeobject_p = pytypeobject_p
        self.unaryfunc = ir.FunctionType(pyobject_p, [pyobject_p])
        self.unaryfunc_p = self.unaryfunc.as_pointer()
        self.binaryfunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p])
        self.binaryfunc_p = self.binaryfunc.as_pointer()
        self.ternaryfunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p, pyobject_p])
        self.ternaryfunc_p = self.ternaryfunc.as_pointer()
        self.ssizeargfunc = ir.FunctionType(pyobject_p, [pyobject_p, ssize_t])
        self.ssizeargfunc_p = self.ssizeargfunc.as_pointer()
        self.ssizeobjargproc = ir.FunctionType(int64, [pyobject_p, ssize_t])
        self.ssizeobjargproc_p = self.ssizeobjargproc.as_pointer()
        self.objobjproc = ir.FunctionType(int64, [pyobject_p, pyobject_p])
        self.objobjproc_p = self.objobjproc.as_pointer()
        self.objobjargproc = ir.FunctionType(int64, [pyobject_p, pyobject_p, pyobject_p])
        self.objobjargproc_p = self.objobjargproc.as_pointer()
        self.pyobj_function = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p])
        self.pyobj_function_p = self.pyobj_function.as_pointer()
        sendfunc_result = int8  # one of 0 (Return), -1 (Error), 1 (Next)
        self.sendfunc = ir.FunctionType(sendfunc_result, [pyobject_p, pyobject_p, pyobject_p])
        self.sendfunc_p = self.sendfunc.as_pointer()
        inqury_result = int8
        self.inquiry = ir.FunctionType(inqury_result, [pyobject_p])
        self.inquiry_p = self.inquiry.as_pointer()
        self.destructor = ir.FunctionType(void, [pyobject_p])
        self.destructor_p = self.destructor.as_pointer()
        self.reprfunc = ir.FunctionType(pyobject_p, [pyobject_p])
        self.reprfunc_p = self.reprfunc.as_pointer()
        self.hashfunc = ir.FunctionType(ssize_t, [pyobject_p])
        self.hashfunc_p = self.hashfunc.as_pointer()
        self.getattrfunc = ir.FunctionType(pyobject_p, [pyobject_p, char_p])
        self.getattrfunc_p = self.getattrfunc.as_pointer()
        self.getattrofunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p])
        self.getattrofunc_p = self.getattrofunc.as_pointer()
        self.setattrfunc = ir.FunctionType(int8, [pyobject_p, char_p, pyobject_p])
        self.setattrfunc_p = self.setattrfunc.as_pointer()
        self.setattrofunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p])
        self.setattrofunc_p = self.setattrofunc.as_pointer()
        self.getter = ir.FunctionType(pyobject_p, [pyobject_p, void_p])
        self.getter_p = self.getter.as_pointer()
        self.setter = ir.FunctionType(int8, [pyobject_p, pyobject_p, void_p])
        self.setter_p = self.setter.as_pointer()
        self.visitproc = ir.FunctionType(int64, [pyobject_p, void_p])
        self.visitproc_p = self.visitproc.as_pointer()
        self.traverseproc = ir.FunctionType(int64, [pyobject_p, self.visitproc_p, void_p])
        self.traverseproc_p = self.traverseproc.as_pointer()
        self.richcmpfunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p, int8])
        self.richcmpfunc_p = self.richcmpfunc.as_pointer()
        self.getiterfunc = ir.FunctionType(pyobject_p, [pyobject_p])
        self.getiterfunc_p = self.getiterfunc.as_pointer()
        self.iternextfunc = ir.FunctionType(pyobject_p, [pyobject_p])
        self.iternextfunc_p = self.iternextfunc.as_pointer()
        self.lenfunc = ir.FunctionType(ssize_t, [pyobject_p])
        self.lenfunc_p = self.lenfunc.as_pointer()
        self.descrgetfunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p, pyobject_p])
        self.descrgetfunc_p = self.descrgetfunc.as_pointer()
        self.descrsetfunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p, pyobject_p])
        self.descrsetfunc_p = self.descrsetfunc.as_pointer()
        self.initproc = ir.FunctionType(int8, [pyobject_p, pyobject_p, pyobject_p])  # return 0 if ok -1 if exception
        self.initproc_p = self.initproc.as_pointer()
        self.allocfunc = ir.FunctionType(pyobject_p, [pytypeobject_p, ssize_t])
        self.allocfunc_p = self.allocfunc.as_pointer()
        self.newfunc = ir.FunctionType(pyobject_p, [pytypeobject_p, pyobject_p, pyobject_p])
        self.newfunc_p = self.newfunc.as_pointer()
        self.freefunc = ir.FunctionType(void, [void_p])
        self.freefunc_p = self.freefunc.as_pointer()
        pyobject_p_arr_p = pyobject_p.as_pointer()
        self.vectorcallfunc = ir.FunctionType(pyobject_p, [pyobject_p, pyobject_p_arr_p, ssize_t, pyobject_p])
        self.vectorcallfunc_p = self.vectorcallfunc.as_pointer()

        self.getbufferproc = ir.FunctionType(int8, [pyobject_p, pybuffer_p, int8])
        self.getbufferproc_p = self.getbufferproc.as_pointer()
        self.releasebufferproc = ir.FunctionType(void, [pyobject_p, pybuffer_p])
        self.releasebufferproc_p = self.releasebufferproc.as_pointer()
